name: Publish Python Package to PyPI

on:
  release:
    types: [published]

jobs:
  check-ci:
    name: Check CI Status on Main
    runs-on: ubuntu-latest
    outputs:
      ci-passed: ${{ steps.check-status.outputs.ci-passed }}
    
    steps:
    - name: Check CI status on main branch
      id: check-status
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get the latest CI run for main branch
        latest_run=$(gh api repos/${{ github.repository }}/actions/workflows/ci.yml/runs \
          --jq '.workflow_runs | map(select(.head_branch == "main")) | .[0]')
        
        if [ "$latest_run" = "null" ]; then
          echo "No CI runs found for main branch"
          echo "ci-passed=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        status=$(echo "$latest_run" | jq -r '.conclusion')
        echo "Latest CI status on main: $status"
        
        if [ "$status" = "success" ]; then
          echo "ci-passed=true" >> $GITHUB_OUTPUT
          echo "✅ CI is passing on main branch"
        else
          echo "ci-passed=false" >> $GITHUB_OUTPUT
          echo "❌ CI is not passing on main branch (status: $status)"
          exit 1
        fi

  build:
    name: Build distribution 📦
    runs-on: ubuntu-latest
    needs: check-ci

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - name: Install pypa/build
      run: >-
        python3 -m
        pip install
        build
        --user
    - name: Build a binary wheel and a source tarball
      run: python3 -m build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        if-no-files-found: error

  publish-to-pypi:
    name: >-
      Publish Python 🐍 distribution 📦 to PyPI
    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    needs:
    - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/versionator-mcp
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution 📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    name: >-
      Sign the Python 🐍 distribution 📦 with Sigstore
      and upload them to GitHub Release
    needs:
    - publish-to-pypi
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release upload
        '${{ github.ref_name }}' dist/**
        --repo '${{ github.repository }}'
        --clobber
