---
description: When a new package is added to the repo, or a package version mismatch appears, or a package requires an upgrade
alwaysApply: false
---
# Versionator Integration Rules

## Package Version Checking
- **ALWAYS** query the current version of packages using the Versionator MCP server before installing, updating, or recommending packages
- Use `get_package_version(package_manager, package_name)` to get the latest version information
- When suggesting package installations, include the specific version number obtained from Versionator
- Verify package existence and current versions before providing installation commands

## Supported Package Managers
Use these package manager names with Versionator:
- `python` or `pypi` for Python packages
- `npm` or `node` for Node.js packages
- `ruby` or `gem` for Ruby gems
- `rust` or `cargo` for Rust crates
- `go` or `golang` for Go modules
- `terraform` or `tf` for Terraform providers
- `docker` or `dockerhub` for Docker images
- `perl` or `cpan` for Perl modules
- `r` or `cran` for R packages
- `bioconda` or `conda` for Bioconda packages

## Examples
- Before suggesting `pip install pandas`, query `get_package_version("python", "pandas")` first
- Before suggesting `npm install react`, query `get_package_version("npm", "react")` first
- Before suggesting `cargo add serde`, query `get_package_version("rust", "serde")` first

## Benefits
- Ensures users get the most current package versions
- Prevents installation of outdated or deprecated packages
- Provides accurate version information for dependency management
- Helps identify if packages exist before suggesting them
# Versionator Integration Rules

## Package Version Checking
- **ALWAYS** query the current version of packages using the Versionator MCP server before installing, updating, or recommending packages
- Use `get_package_version(package_manager, package_name)` to get the latest version information
- When suggesting package installations, include the specific version number obtained from Versionator
- Verify package existence and current versions before providing installation commands

## Supported Package Managers
Use these package manager names with Versionator:
- `python` or `pypi` for Python packages
- `npm` or `node` for Node.js packages
- `ruby` or `gem` for Ruby gems
- `rust` or `cargo` for Rust crates
- `go` or `golang` for Go modules
- `terraform` or `tf` for Terraform providers
- `docker` or `dockerhub` for Docker images
- `perl` or `cpan` for Perl modules
- `r` or `cran` for R packages
- `bioconda` or `conda` for Bioconda packages

## Examples
- Before suggesting `pip install pandas`, query `get_package_version("python", "pandas")` first
- Before suggesting `npm install react`, query `get_package_version("npm", "react")` first
- Before suggesting `cargo add serde`, query `get_package_version("rust", "serde")` first

## Benefits
- Ensures users get the most current package versions
- Prevents installation of outdated or deprecated packages
- Provides accurate version information for dependency management
- Helps identify if packages exist before suggesting them
